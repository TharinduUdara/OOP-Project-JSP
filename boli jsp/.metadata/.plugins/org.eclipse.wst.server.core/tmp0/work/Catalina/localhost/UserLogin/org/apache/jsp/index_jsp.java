/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.26
 * Generated at: 2019-09-30 06:24:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.oop.util.CommonConstants;
import com.oop.util.CommonUtil;
import java.sql.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oop.util.CommonConstants");
    _jspx_imports_classes.add("com.oop.util.CommonUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/font-awesome.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/loginstyles.css\">\r\n");
      out.write("<title>Welcome</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"overlay\"></div>\r\n");
      out.write("    <div class=\"login-box\">\r\n");
      out.write("        <h1>Login</h1>\r\n");
      out.write("        \r\n");
      out.write("    <form name=\"login-form\" action=\"LoginServlet\" method=\"POST\" onsubmit=\"return ValidateForm()\">\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        \t");

        		String error = null;
        		String notlogged = null;
        		String loggedout = null;
        		error = request.getParameter("error");
        		notlogged = request.getParameter("notlogged");
        		loggedout = request.getParameter("loggedout");
        		if(error != null)
        		{
        			out.println("<div id=\"error\" class=\"error\">");
        			out.println("Username or Password is wrong!");
        			out.println("</div>");
        		}
        		else if(notlogged != null){
        			out.println("<div id=\"error\" class=\"error\">");
        			out.println("Please login to enter!");
        			out.println("</div>");
        		}
        		else if(loggedout != null){
        			out.println("<div id=\"error\" class=\"success\">");
        			out.println("Logged out successfully!");
        			out.println("</div>");
        		}
        		else{
        			out.println("<div id=\"error\"></div>");	
        		}
        		
        	
      out.write("\r\n");
      out.write("        \r\n");
      out.write("            \r\n");
      out.write("        <div class=\"text-box\">\r\n");
      out.write("            <i class=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n");
      out.write("            <input type=\"text\" placeholder=\"Username\" name=\"username\" maxlength=\"10\" required>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"text-box\">\r\n");
      out.write("            <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\r\n");
      out.write("            <input type=\"password\" placeholder=\"Password\" name=\"password\" maxlength=\"10\" required>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <input type=\"submit\" value=\"Login\" class=\"login-btn\">\r\n");
      out.write("    </form>\r\n");
      out.write("    </div>\r\n");
      out.write("<script src=\"js/script.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	
	
	Connection connection = null;
    Statement statement = null;
    
    try {
        Class.forName("com.mysql.jdbc.Driver");
        /**connection = DriverManager.getConnection("jdbc:mysql://localhost:3307/",
                "root", "");*/
                connection= DriverManager.getConnection(CommonUtil.properties.getProperty(CommonConstants.URL),
    	        		CommonUtil.properties.getProperty(CommonConstants.USERNAME), CommonUtil.properties.getProperty(CommonConstants.PASSWORD));
                
        statement = connection.createStatement();
        String sql = "CREATE DATABASE IF NOT EXISTS school";
        statement.executeUpdate(sql);
        //System.out.println("Database created!");
    } catch (SQLException sqlException) {
        if (sqlException.getErrorCode() == 1007) {
            // Database already exists error
            System.out.println(sqlException.getMessage());
        } else {
            // Some other problems, e.g. Server down, no permission, etc
            sqlException.printStackTrace();
        }
    } catch (ClassNotFoundException e) {
        // No driver class found!
    }
    
    
    try {
    	//Class.forName("com.mysql.jdbc.Driver");
    	/*connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/school", "root", "");*/
    	connection= DriverManager.getConnection(CommonUtil.properties.getProperty(CommonConstants.URL),
    	        		CommonUtil.properties.getProperty(CommonConstants.USERNAME), CommonUtil.properties.getProperty(CommonConstants.PASSWORD));
    	statement = connection.createStatement();
    	String query = "CREATE TABLE IF NOT EXISTS student(memberID varchar(10) not null,firstName varchar(20),lastName varchar(20),gender varchar(10) DEFAULT 'Male',address1 varchar(20),"
    			+"address2 varchar(20),"
    			+"city varchar(20),"
    			+"parent_guardian varchar(20),"
    			+"HomeTelephone varchar(10),"
    			+"mobile varchar(10),"
    			+"DOB varchar(20),"
    			+"classes varchar(10),"
    			+"userName varchar(20) not null,"
    			+"password varchar(32) not null,"
    			+"primary key (memberID));";
    	statement.executeUpdate(query);
    	
    	query = "CREATE TABLE IF NOT EXISTS teacher("
    			+"teacherID varchar(10) not null,"
    			+"firstName varchar(20),"
    			+"lastName varchar(20),"
    			+"gender varchar(10) DEFAULT 'Male',"
    			+"address1 varchar(20),"
    			+"address2 varchar(20),"
    			+"city varchar(20),"
    			+"HomeTelephone varchar(10),"
    			+"mobile varchar(10),"
    			+"DOB varchar(20),"
    			+"userName varchar(20),"
    			+"password varchar(32),"
    			+"NIC varchar(20),"
    			+"rClass varchar(10),"
    			+"primary key (teacherID));";
    	
    	statement.executeUpdate(query);
    	
    	
    	query = "CREATE TABLE IF NOT EXISTS admin(username varchar(10), password varchar(10), primary key (username));";
    	statement.executeUpdate(query);
    	
    	query = "INSERT INTO admin(username,password) values('admin','admin');";
    	statement.executeUpdate(query);
        
    	query = "INSERT INTO admin(username,password) values('cashier','cashier');";
    	statement.executeUpdate(query);
        
    	} 
    	catch (Exception e) 
    	{
    		//out.println("<h1>An error occurred. "+ e.getMessage() +"</h1>");
    	}
    
    connection.close();

      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
